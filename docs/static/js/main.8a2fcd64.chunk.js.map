{"version":3,"sources":["Album/Album.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","footer","Album","classes","useState","counter","setCounter","avalible","setAvalible","wait","setWait","Fragment","CssBaseline","className","Container","maxWidth","Typography","component","variant","align","color","gutterBottom","paragraph","Grid","container","item","xs","sm","md","Card","CardMedia","image","title","CardContent","onClick","aux","Math","random","parseInt","console","log","timer","App","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a2fcd64.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n// import AppBar from '@material-ui/core/AppBar';\r\n// import Button from '@material-ui/core/Button';\r\n// import CameraIcon from '@material-ui/icons/PhotoCamera';\r\nimport Card from '@material-ui/core/Card';\r\n// import CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\n// import Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n// import Link from '@material-ui/core/Link';\r\n\r\nconst useStyles = makeStyles( ( theme ) => ( {\r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n  heroButtons: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n  },\r\n}));\r\n\r\n\r\nexport default function Album() {\r\n  const classes = useStyles();\r\n\r\n  const randomCurrentCount = 0;\r\n  const randomAvalible = 0;\r\n  const randomTimeWait = 0;\r\n  const min=0;\r\n  const max=100;\r\n\r\n  const [ counter,setCounter ]   = useState( randomCurrentCount );\r\n  const [ avalible,setAvalible ] = useState( randomAvalible );\r\n  const [ wait,setWait ]         = useState( randomTimeWait );\r\n\r\n  const timer = () => {\r\n    let aux = min + Math.random() * (max - min);\r\n    aux = parseInt(aux);\r\n    console.log('CAlling timer: ',aux);\r\n\r\n    setCounter( aux );\r\n    setAvalible( avalible+1 );\r\n    setWait( wait+1 );\r\n  }\r\n  \r\n  const handleRandom = () => {\r\n    timer();\r\n  }\r\n\r\n  \r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <main>\r\n        <div className={classes.heroContent}>\r\n          <Container maxWidth=\"sm\">\r\n            \r\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n              Sistema de Aforo\r\n            </Typography>\r\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\r\n              <b>Pase adelante </b>\r\n              el aforo en nuestro establecimiento esta disponible.\r\n            </Typography>\r\n          </Container>\r\n        </div>\r\n\r\n        <Container className={classes.cardGrid} maxWidth=\"md\">\r\n          {/* End hero unit */}\r\n          <Grid container spacing={4}>\r\n            {/* {cards.map((card) => (\r\n              <Grid item key={card} xs={12} sm={6} md={4}> */}\r\n              <Grid item xs={12} sm={6} md={4}>\r\n                <Card className={classes.card}>\r\n                  <CardMedia\r\n                    className={classes.cardMedia}\r\n                    image=\"https://assets.website-files.com/5bff8886c3964a992e90d465/5c00621b7aefa4f9ee0f4303_wide-shot.svg\"\r\n                    title=\"Image title\"\r\n                  />\r\n                  <CardContent className={classes.cardContent}>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                      Conteo actual\r\n                    </Typography>\r\n                    <Typography>\r\n                      { counter }\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>              \r\n              \r\n              <Grid item xs={12} sm={6} md={4}>\r\n                <Card className={classes.card}>\r\n                  <CardMedia\r\n                    className={classes.cardMedia}\r\n                    image=\"https://png.pngtree.com/png-vector/20190826/ourlarge/pngtree-appreciate-png-image_1699900.jpg\"\r\n                    title=\"Image title\"\r\n                  />\r\n                  <CardContent className={classes.cardContent}>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                      Disponible\r\n                    </Typography>\r\n                    <Typography>\r\n                      { avalible }\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>              \r\n              \r\n              <Grid item xs={12} sm={6} md={4}>\r\n                <Card className={classes.card}>\r\n                  <CardMedia\r\n                    className={classes.cardMedia}\r\n                    image=\"https://image.shutterstock.com/image-vector/business-people-waiting-job-interview-260nw-699839041.jpg\"\r\n                    title=\"Image title\"\r\n                  />\r\n                  <CardContent className={classes.cardContent}>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                      Tiempo aprox espera\r\n                    </Typography>\r\n                    <Typography component=\"h1\">\r\n                      {  wait }\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n\r\n              <button onClick={ handleRandom }>Click me plisssss</button>\r\n\r\n            {/* ))} */}\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n\r\n    </React.Fragment>\r\n  );\r\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\n// import { Aforo } from \"./aforo/Aforo\";\nimport Album from './Album/Album'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        {/* <p>\n          <Hello title='Hello from props'/>\n        </p> */}\n\n        {/* <div>\n          <Aforo title='Hola soy aforo'/>\n        </div> */}\n\n        {/* <Text \n        arrayOfNumbers={[2,45,8]}\n        objectWithInfo={ {key:'value', key2:'otherValue'} }\n        number={2} \n        text='Texto en string' \n        boolean={true}\n        isActivate/> */}\n\n        {/* <Aforo \n        \n        actual={38}\n        disponible={12}\n        estado={true}\n        alphaTiempo='12 min apox'\n\n        /> */}\n\n        <Album value={10}/>\n\n        {/* <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Lee la doc prro\n        </a> */}\n      </header>\n    </div>\n  );\n}\n\n// function Hello(props)\n// {\n// return <h1>Bienvenidos a React App, { props.title }</h1>\n// }\n\n// class Hello extends Component\n// {\n//   render () \n//   {\n//     return <h1>Bienvenidos a React App, { this.props.title }</h1>\n//   }\n// }\n\n// class Text extends Component {\n//   render () {\n//     const textoSegundoBool = this.props.isActivate ? 'On' : 'Off';\n//     const mappedNumbers = this.props.arrayOfNumbers.map( n=> n*2 );\n\n//     return (\n//       <div>\n//         <p> { this.props.text } </p> \n//         <p> { this.props.number } </p>\n//         <p> { JSON.stringify(this.props.boolean) } </p>\n//         <p> { this.props.isActivate } </p>\n//         <p> { textoSegundoBool } </p>\n//         <p> { this.props.arrayOfNumbers.join(', ') } </p>\n//         <p> { mappedNumbers.join(', ') } </p>\n//         <p> { this.props.objectWithInfo.key } </p>\n//       </div>\n//     )\n//   }\n  \n// }\n\n// class Aforo extends Component {\n\n//   // this.state = {\n\n//   // }\n\n\n//   render() {\n\n//     const {\n//       estado,\n//       actual,\n//       disponible,\n//       alphaTiempo,      \n//     } = this.props;\n\n//     const estadoCli = estado ? 'Siga' : 'Espere'\n\n//      return (\n//       <div>\n//           <h2> { actual } </h2>\n//           <h2> { disponible } </h2>\n//           <h2> { alphaTiempo } </h2>\n//           <h2> { estadoCli } </h2>\n//       </div>\n\n//      )\n//   }\n// }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}